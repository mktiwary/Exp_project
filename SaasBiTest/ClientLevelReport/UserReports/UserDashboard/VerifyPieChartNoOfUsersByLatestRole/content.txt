!img /files/images/experian_logo.png
!lastmodified

!3 '''Description:'''  This is integration test to verify the Pie chart data for Number of Users by Latest Role

!*> Variable & Setup
!path lib/*.jar

!|dbfit.PostgresTest                       |

!|ConnectUsingFile|${env} |

|set option|bind symbols|false|
*!
!4 '''Test 1:''' Verify the Pie Chart data for Number of Users by Latest Role

!*> '''Given''' Report is created on micro-strategy and delivered to Test team for validation.
!*> Clear Table
!|Execute|delete from clientaudit.f_user_audit_activity |

|commit|

!|Execute|delete from clientaudit.d_user_roles |

|commit|
*!

!*> insert Data
!|com.objectmentor.fixtures.CommandLineFixture|
|command|./sqlfiles/pgexecutesql.sh ${dbname} user_dashboard/f_user_audit_activity.sql|x|
|contains|x.stdout|Insert Successful|

!|com.objectmentor.fixtures.CommandLineFixture|
|command|./sqlfiles/pgexecutesql.sh ${dbname} user_dashboard/d_user_roles.sql|x|
|contains|x.stdout|Insert Successful|
*!
*!
!*> '''When'''  MSTR report is executed and MSTR produced a csv file
!*> Execute MSTR report
|com.objectmentor.fixtures.CommandLineFixture|
|command|ssh -tt -i ${bastionkey} -o !-StrictHostKeyChecking=no-! ${mstrServer} 'bash -s' << EOF  sleep 5;sudo /opt/MicroStrategy/bin/mstrsysmgr -w /home/genesaas/runTest.smw -p user=administrator password= project=${dbname}; exit;EOF|
*!
!*> '''And''' Copy file from MSTR server to .SaasBiTest.ClientLevelReport.UserReports.UserDashboard.DbFit Server and Load csv file into postgres DB [local instance]
|com.objectmentor.fixtures.CommandLineFixture|
|command|sleep 25|

|com.objectmentor.fixtures.CommandLineFixture|
|command|mstr-script/copy-file.sh ${dbname} ${mstrServer} User_Dashboard_Dataset_4.csv|
*!
*!
!*> '''Then''' Compare the data on source and target
!include .SaasBiTest.CreateFunction

!*> Drop table if exists
!|Execute|DROP TABLE IF EXISTS dbfit_test.user_report_ds41 CASCADE|

|commit|
*!
!*> Load CSV file into DB
!|Execute|!- set schema 'dbfit_test' -!|

!|Execute|!- 
DO $$ BEGIN
      PERFORM "load_csv_file2"('user_report_ds41','/home/jenkins/workspace/-!${dbname}!-/User_Dashboard_Dataset_4.csv',4);
END $$;

-!|

|commit|
*!
!*> Microstrategy Data (Target Data)
!|Store Query|!- select user1_role as rolename, sum(coalesce(cast(nullif(total_user1s_as_of_reporting_date,'') as integer),0))::int as ActiveRole_Cnt 
from dbfit_test.user_report_ds41 group by user1_role -!|target_data|
*!

!*> Compare source data with target data
!*< Setup
!|dbfit.PostgresTest|
!|ConnectUsingFile|${env} |
|set option|bind symbols|false|
*!
!*> Source Query
!|Store Query| with act as (select case when (d1.roleallocatedtimestamp > d2.roleallocatedtimestamp) then 'Active' when d2.roleallocatedtimestamp is null then 'Active' else 'Inactive' end as status, d1.userid, d1.roleid, d1.rolename, d1.roleallocatedtimestamp as role_valid_from, case when (d1.roleallocatedtimestamp > coalesce(d2.roleallocatedtimestamp,'2100-01-01 00:00:00')) then d1.roleallocatedtimestamp else coalesce(d2.roleallocatedtimestamp,'2100-01-01 00:00:00') end as role_valid_to from (select * from clientaudit.d_user_roles where rolestatus = 'Active') as d1 left join (select * from clientaudit.d_user_roles where rolestatus = 'Inactive') as d2 on d1.roleid = d2.roleid and d1.userid= d2.userid ), temp_cte as (select userid, eventname, eventtimestamp, RANK() OVER(partition by userid order by eventtimestamp desc) as rnk from clientaudit.f_user_audit_activity) select act.rolename, count(temp_cte.userid)::int as ActiveRole_Cnt from temp_cte join act on temp_cte.userid = act.userid where temp_cte.rnk=1 and temp_cte.eventname not in ('Deleted','Disabled') and act.status ='Active' and temp_cte.eventtimestamp >= act.role_valid_from and temp_cte.eventtimestamp <= act.role_valid_to group by act.rolename order by rolename |source_data|
*!

|compare stored queries|source_data|target_data| 
|rolename|ActiveRole_Cnt|
*!
*!