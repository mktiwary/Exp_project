@case_id=6528724
@section=BI_Microstrategy_Web
@priority=P2
@reference=ANA-133232
@test_type=User_Story_Acceptance
@use_case=ACF
@execution_type=Automated

!img /files/images/experian_logo.png
!lastmodified

!3 '''Description:''' 
 This is integration test to verify that '''Number Of Applications by worklist on Applications received''' matches source data on BI data store when update is received on application.

 Rule: For each application ID select the most recent update to all applications (applications can have multiple updates).  There should be only one row per application ID.

!*> Variable & Setup
!path lib/*.jar

!|dbfit.PostgresTest                       |

!|ConnectUsingFile|${env} |

|set option|bind symbols|false|
*!
!4 '''Test 1:''' Ensure that Application Received Report data matches with source data

!*> '''Given''' Report is created on micro-strategy and delivered to Test team for validation.
!*> Clear Table
!|Execute|delete from public.f_application_decision |

|commit|
*!
!*> insert Message
!|com.objectmentor.fixtures.CommandLineFixture|
|command|./sqlfiles/pgexecutesql.sh ${dbname} app_received/app_by_source_2.sql|x|
|contains|x.stdout|Insert Successful|
#|command|./sqlfiles/pgexecutesql.sh ${dbname} app_received/update_worklist.sql|y|
#|contains|y.stdout|Insert Successful|
*!
|commit|
*!
!* '''When'''  MSTR report is executed and MSTR produced a csv file
!*> Execute MSTR report
#|com.objectmentor.fixtures.CommandLineFixture|
#|command|ssh -tt -i ${bastionkey} -o !-StrictHostKeyChecking=no-! ${mstrServer} 'bash -s' << EOF  sleep 5;sudo /opt/MicroStrategy/bin/mstrsysmgr -w /home/genesaas/runTest.smw -p user=administrator password= project=${dbname}; exit;EOF|
*!
!*> '''And''' Copy file from MSTR server to DbFit Server and Load csv file into postgres DB [local instance]
#|com.objectmentor.fixtures.CommandLineFixture|
#|command               |sleep 10              |

|com.objectmentor.fixtures.CommandLineFixture|
|command|mstr-script/copy-file.sh ${dbname} ${mstrServer} Applications_Received_Dataset.csv|
*!
!*> Capture source data
!include .SaasBiTest.CreateFunction
*!
*!

!* '''Then''' Compare the data on source and target
!*> Drop table if exists
!|Execute|DROP TABLE IF EXISTS dbfit_test.applications_received6 CASCADE|

|commit|
*!
!*> Load CSV file into DB
!|Execute|!- set schema 'dbfit_test' -!|

!|Execute|!- 
DO $$ BEGIN
      PERFORM "load_csv_file2"('applications_received6','/home/jenkins/workspace/-!${dbname}!-/Applications_Received_Dataset.csv',10);
END $$;

-!|

|commit|
*!
!*> Microstrategy Data (Target Data)
!|Store Query|!- select rtrim(ltrim(replace (week,'w/c','')))::varchar week1,work_list worklist, sum("number_of_application_(distinct)"::integer) no_of_app
from dbfit_test.applications_received6
group by replace (week,'w/c','') , work_list,week
order by replace (week,'w/c','') ,week
-!|target_data|

*!

!* Compare source data with target data
!*< Setup
!|dbfit.PostgresTest                       |
!|ConnectUsingFile|${env} |
|set option|bind symbols|false|
*!
!*> Source Query
!|Store Query|!- 
/*
select a.week2 from
(
select date_trunc('week', applicationcreationlocaltimestamp::timestamp)::date week1
from f_application_decision
) a
group by week1
order by week1
*/



/*Temp query to get required data*/
with app_rec as(
select u.applicationnumber,u.applicationcreationlocaltimestamp, u.applicationupdatelocaltimestamp,  
u.decisiontype,u.applicationstatus,u.channel,u.worklist
from public.f_application_decision as u
inner join (
select applicationNumber,applicationcreationlocaltimestamp, max(applicationupdatelocaltimestamp) applicationupdatelocaltimestamp from public.f_application_decision
group by applicationNumber,applicationcreationlocaltimestamp
) as q
on u.applicationnumber =q.applicationnumber
and u.applicationupdatelocaltimestamp = q.applicationupdatelocaltimestamp
and u.applicationcreationtimestamp = q.applicationcreationlocaltimestamp
order by u.applicationupdatelocaltimestamp
) 
/* Conversion to select month*/
,decision_tmp as (
select week1, worklist,applicationnumber
from ( 
select b.week1, b.worklist,b.applicationnumber
from (
select a.week1, a.worklist,a.applicationnumber
from (
select date_trunc('week', applicationcreationlocaltimestamp::timestamp)::date week1, cast (applicationcreationlocaltimestamp as text) dt2
,applicationnumber
,worklist
from app_rec
) as a
) as b
) tmp
)
/* Main query*/
select distinct week1::varchar week1, worklist, count(distinct applicationnumber) no_of_app from decision_tmp 
group by week1,worklist
order by week1
 -!|source_data|

|commit|
*!
|compare stored queries Hide matching rows|source_data|target_data| 
|week1|worklist|no_of_app|
*!
*!